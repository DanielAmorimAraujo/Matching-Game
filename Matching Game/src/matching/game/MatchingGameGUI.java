/*
Name: Daniel Araujo
Date: 09 Aug 18
Title: Matching Game
Purpose: this program uses arrays to simulate a matchin game.
* A grid of cards will be displayed and the user is to select 2 cards at a time
* looking for matching cards. The goal of this game is to see how quickly
* the user can find all the matches.
*/

package matching.game;

import java.util.*; //imports the classes needed for ArrayLists
import javax.swing.ImageIcon; //imports the classes needed to assign variables to images (ImageIcon)

public class MatchingGameGUI extends javax.swing.JFrame {

    ArrayList <Integer> cards = new ArrayList(); //declares an integer ArrayList cards which will be used to store the randomly generated card sequence
    ArrayList <Integer> set = new ArrayList(); //declares an integer ArrayList set which will  be used to store two values for every card which will be then used to generate the cards ArrayList
    //declares ImageIcon variables to store the icons for each card face with a corresponding letter of the alphabet for differentiation - images stored in the Matching Game project folder
    ImageIcon a = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Blastoise Icon.png"));
    ImageIcon b = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Blaziken Icon.png"));
    ImageIcon c = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Charizard X Icon.png"));
    ImageIcon d = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Gyarados Icon.png"));
    ImageIcon e = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Lucario Icon.png"));
    ImageIcon f = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Metagross Icon.png"));
    ImageIcon g = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Sceptile Icon.png"));
    ImageIcon h = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Swampert Icon.png"));
    ImageIcon i = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Tyranitar Icon.png"));
    ImageIcon j = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Mega Venusaur Icon.png"));
    ImageIcon back = new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png")); //declares ImageIcon variable back to store the icon for the back of the card - image stored in the Matching Game project folder
    
    int intCount, intCard1, intCard2, intC1, intC2, intCardsLeft; /*declares intCount, intCard1, intCard2, intC1, intC2, and intCardLeft integer variables
    * intCount stores the number of cards selected by the user
    * intCard1 stores the value of the first card selected (value determined through the cards ArrayList)
    * intCard2 stores the value of the second card selected (value determined through the cards ArrayList)
    * intC1 stores the index of the first card selected in the cards ArrayList
    * intC2 stores the index of the second card selected in the cards ArrayList
    * intCardsLeft stores the number of cards left*/
    int[] change = new int[20]; //declares integer that will be used to keep track of how many cards have been matched by switching the respective value for a card in the array from 1 to 2 when its been matched
    
    /**
     * Creates new form MatchingGameGUI
     */
    public MatchingGameGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIconHolder = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        btnCard1 = new javax.swing.JButton();
        btnCard2 = new javax.swing.JButton();
        btnCard3 = new javax.swing.JButton();
        btnCard4 = new javax.swing.JButton();
        btnCard5 = new javax.swing.JButton();
        btnCard6 = new javax.swing.JButton();
        btnCard7 = new javax.swing.JButton();
        btnCard8 = new javax.swing.JButton();
        btnCard9 = new javax.swing.JButton();
        btnCard10 = new javax.swing.JButton();
        btnCard11 = new javax.swing.JButton();
        btnCard12 = new javax.swing.JButton();
        btnCard13 = new javax.swing.JButton();
        btnCard14 = new javax.swing.JButton();
        btnCard15 = new javax.swing.JButton();
        btnCard16 = new javax.swing.JButton();
        btnCard17 = new javax.swing.JButton();
        btnCard18 = new javax.swing.JButton();
        btnCard19 = new javax.swing.JButton();
        btnCard20 = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnGuessAgain = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtInstruction = new javax.swing.JTextField();

        lblIconHolder.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 0, 102));
        lblTitle.setText("Matching Game");

        btnCard1.setBackground(new java.awt.Color(255, 255, 255));
        btnCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard1.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard1.setEnabled(false);
        btnCard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard1ActionPerformed(evt);
            }
        });

        btnCard2.setBackground(new java.awt.Color(255, 255, 255));
        btnCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard2.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard2.setEnabled(false);
        btnCard2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard2ActionPerformed(evt);
            }
        });

        btnCard3.setBackground(new java.awt.Color(255, 255, 255));
        btnCard3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard3.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard3.setEnabled(false);
        btnCard3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard3ActionPerformed(evt);
            }
        });

        btnCard4.setBackground(new java.awt.Color(255, 255, 255));
        btnCard4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard4.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard4.setEnabled(false);
        btnCard4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard4ActionPerformed(evt);
            }
        });

        btnCard5.setBackground(new java.awt.Color(255, 255, 255));
        btnCard5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard5.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard5.setEnabled(false);
        btnCard5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard5ActionPerformed(evt);
            }
        });

        btnCard6.setBackground(new java.awt.Color(255, 255, 255));
        btnCard6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard6.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard6.setEnabled(false);
        btnCard6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard6ActionPerformed(evt);
            }
        });

        btnCard7.setBackground(new java.awt.Color(255, 255, 255));
        btnCard7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard7.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard7.setEnabled(false);
        btnCard7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard7ActionPerformed(evt);
            }
        });

        btnCard8.setBackground(new java.awt.Color(255, 255, 255));
        btnCard8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard8.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard8.setEnabled(false);
        btnCard8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard8ActionPerformed(evt);
            }
        });

        btnCard9.setBackground(new java.awt.Color(255, 255, 255));
        btnCard9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard9.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard9.setEnabled(false);
        btnCard9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard9ActionPerformed(evt);
            }
        });

        btnCard10.setBackground(new java.awt.Color(255, 255, 255));
        btnCard10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard10.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard10.setEnabled(false);
        btnCard10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard10ActionPerformed(evt);
            }
        });

        btnCard11.setBackground(new java.awt.Color(255, 255, 255));
        btnCard11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard11.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard11.setEnabled(false);
        btnCard11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard11ActionPerformed(evt);
            }
        });

        btnCard12.setBackground(new java.awt.Color(255, 255, 255));
        btnCard12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard12.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard12.setEnabled(false);
        btnCard12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard12ActionPerformed(evt);
            }
        });

        btnCard13.setBackground(new java.awt.Color(255, 255, 255));
        btnCard13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard13.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard13.setEnabled(false);
        btnCard13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard13ActionPerformed(evt);
            }
        });

        btnCard14.setBackground(new java.awt.Color(255, 255, 255));
        btnCard14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard14.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard14.setEnabled(false);
        btnCard14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard14ActionPerformed(evt);
            }
        });

        btnCard15.setBackground(new java.awt.Color(255, 255, 255));
        btnCard15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard15.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard15.setEnabled(false);
        btnCard15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard15ActionPerformed(evt);
            }
        });

        btnCard16.setBackground(new java.awt.Color(255, 255, 255));
        btnCard16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard16.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard16.setEnabled(false);
        btnCard16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard16ActionPerformed(evt);
            }
        });

        btnCard17.setBackground(new java.awt.Color(255, 255, 255));
        btnCard17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard17.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard17.setEnabled(false);
        btnCard17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard17ActionPerformed(evt);
            }
        });

        btnCard18.setBackground(new java.awt.Color(255, 255, 255));
        btnCard18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard18.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard18.setEnabled(false);
        btnCard18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard18ActionPerformed(evt);
            }
        });

        btnCard19.setBackground(new java.awt.Color(255, 255, 255));
        btnCard19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard19.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard19.setEnabled(false);
        btnCard19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard19ActionPerformed(evt);
            }
        });

        btnCard20.setBackground(new java.awt.Color(255, 255, 255));
        btnCard20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Back Icon.png"))); // NOI18N
        btnCard20.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/matching/game/imageresources/Card Done Icon.png"))); // NOI18N
        btnCard20.setEnabled(false);
        btnCard20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCard20ActionPerformed(evt);
            }
        });

        btnPlay.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnGuessAgain.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        btnGuessAgain.setText("Guess Again");
        btnGuessAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuessAgainActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtInstruction.setEditable(false);
        txtInstruction.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        txtInstruction.setText("Click the Play button to start. Make sure to click Guess Again after each guess.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCard11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnCard12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnCard13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnCard14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnCard15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCard16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPlay, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCard17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(btnGuessAgain)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnExit)
                                        .addGap(63, 63, 63))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(btnCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, Short.MAX_VALUE))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(lblTitle)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblTitle)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCard10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCard11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCard12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCard13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCard14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCard15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnCard19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCard16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCard17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCard18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnCard20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuessAgain)
                    .addComponent(btnExit))
                .addGap(16, 16, 16)
                .addComponent(txtInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        //for loop that runs through all the indexes of change array and set value equal to 1
        for (int z = 0; z <= 19; z++)
            change[z] = 1; //adds the value to the change array at index z
        
        //for loop that adds all the numbers from 0 to 9 twice to the set ArrayList - used to represent 10 pairs of cards
        for (int x = 0; x <= 9; x++) //runs through the values 0 to 9
            for (int y = 1; y <= 2; y++) //ensures code runs twice so that each number is added twice consecutively
                set.add(x); //adds the value to the set ArrayList at index x
        
        //for loop that takes the values from the set ArrayList and puts them into the cards ArrayList in a random order
        for (int x = 0; x <= 19; x++) {
            int intIndex = (int)Math.floor(Math.random()*(20-x)); //generates a random number from 0 to the number of values remaining in the set ArrayList
            cards.add(set.get(intIndex)); //takes the value from the set ArrayList at the randomly generated index value (intIndex) and adds it to the cards ArrayList
            set.remove(set.get(intIndex)); //removes the value from the set ArrayList at the randomly generated index value (intIndex)
        }
        
        //enables all the card buttons - originally disabled so that the user could not click them before starting the game
        btnCard1.setEnabled(true);
        btnCard2.setEnabled(true);
        btnCard3.setEnabled(true);
        btnCard4.setEnabled(true);
        btnCard5.setEnabled(true);
        btnCard6.setEnabled(true);
        btnCard7.setEnabled(true);
        btnCard8.setEnabled(true);
        btnCard9.setEnabled(true);
        btnCard10.setEnabled(true);
        btnCard11.setEnabled(true);
        btnCard12.setEnabled(true);
        btnCard13.setEnabled(true);
        btnCard14.setEnabled(true);
        btnCard15.setEnabled(true);
        btnCard16.setEnabled(true);
        btnCard17.setEnabled(true);
        btnCard18.setEnabled(true);
        btnCard19.setEnabled(true);
        btnCard20.setEnabled(true);
        btnPlay.setEnabled(false); //disables the Play (btnPlay) button so that the user does not click it again and alter the set and cards ArrayList
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnCard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard1ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(0); //calls on the icon() method and passes 0 for the parameter
            btnCard1.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard1 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard1ActionPerformed

    private void btnCard2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard2ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(1); //calls on the icon() method and passes 1 for the parameter
            btnCard2.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard2 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard2ActionPerformed

    private void btnCard3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard3ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(2); //calls on the icon() method and passes 2 for the parameter
            btnCard3.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard3 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard3ActionPerformed

    private void btnCard4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard4ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(3); //calls on the icon() method and passes 3 for the parameter
            btnCard4.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard4 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard4ActionPerformed

    private void btnCard5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard5ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(4); //calls on the icon() method and passes 4 for the parameter
            btnCard5.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard5 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard5ActionPerformed

    private void btnCard6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard6ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(5); //calls on the icon() method and passes 5 for the parameter
            btnCard6.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard6 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard6ActionPerformed

    private void btnCard7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard7ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(6); //calls on the icon() method and passes 6 for the parameter
            btnCard7.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard7 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard7ActionPerformed

    private void btnCard8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard8ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(7); //calls on the icon() method and passes 7 for the parameter
            btnCard8.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard8 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard8ActionPerformed

    private void btnCard9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard9ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(8); //calls on the icon() method and passes 8 for the parameter
            btnCard9.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard9 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard9ActionPerformed

    private void btnCard10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard10ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(9); //calls on the icon() method and passes 9 for the parameter
            btnCard10.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard10 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard10ActionPerformed

    private void btnCard11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard11ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(10); //calls on the icon() method and passes 10 for the parameter
            btnCard11.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard11 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard11ActionPerformed

    private void btnCard12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard12ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(11); //calls on the icon() method and passes 11 for the parameter
            btnCard12.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard12 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard12ActionPerformed

    private void btnCard13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard13ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(12); //calls on the icon() method and passes 12 for the parameter
            btnCard13.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard13 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard13ActionPerformed

    private void btnCard14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard14ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(13); //calls on the icon() method and passes 13 for the parameter
            btnCard14.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard14 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard14ActionPerformed

    private void btnCard15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard15ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(14); //calls on the icon() method and passes 14 for the parameter
            btnCard15.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard15 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard15ActionPerformed

    private void btnCard16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard16ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(15); //calls on the icon() method and passes 15 for the parameter
            btnCard16.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard16 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard16ActionPerformed

    private void btnCard17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard17ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(16); //calls on the icon() method and passes 16 for the parameter
            btnCard17.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard17 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard17ActionPerformed

    private void btnCard18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard18ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(17); //calls on the icon() method and passes 17 for the parameter
            btnCard18.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard18 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard18ActionPerformed

    private void btnCard19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard19ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(18); //calls on the icon() method and passes 18 for the parameter
            btnCard19.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard19 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard19ActionPerformed

    private void btnCard20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCard20ActionPerformed
        //if statement that runs if two cards have not been selected yet - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount != 2) {
            icon(19); //calls on the icon() method and passes 19 for the parameter
            btnCard20.setIcon(lblIconHolder.getIcon()); //sets the icon of the btnCard20 button as the icon temporarily stored in the lblIconHolder label
        }
    }//GEN-LAST:event_btnCard20ActionPerformed

    private void btnGuessAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuessAgainActionPerformed
        intCardsLeft = 0; //sets the value of the intCardsLeft variable as 0
        
        //if statement that executes once 2 cards have been selected - determined by the intCount that counts how many cards have been selected in a guess
        if (intCount == 2) {
            intCount = 0; //resets the count to 0 so that the user can continue guessing
            if ((intCard1 == intCard2) && (intC1 != intC2)) //if statement that executes if the intCard1 and intCard2 variable are equal and the intC1 and intC2 variable are not equal
                iconGuessAgain(2); //calls on the iconGuessAgain method() and passes 2 for the parameter
            else //else statement that executes if the intCard1 and intCard2 variable are not equal or the intC1 and intC2 variable are equal
                iconGuessAgain(1); //calls on the iconGuessAgain method() and passes 1 for the parameter
            
            boolean isDone = true; //declares boolean variable blnEnd as true
            //for loop that runs through all the indexes of the change array - used to determine if all the cards have been matched
            for (int i = 0; i < change.length; i++)
                //if statement that executes if any of the values in the change array is not equal to 2 - is equal to 2 if the card is matched
                if (change[i] != 2) {
                    isDone = false; //sets the blnEnd boolean variable as false - means that some of the cards are not matched
                    intCardsLeft++; //increases the intCardsLeft variable by one for every unmatched card
                }
            txtInstruction.setText("There are " + intCardsLeft + " left!"); //outputs the text in the txtInstruction text field informing the user how many cards are left
            if (isDone) //if statement that executes if blnEnd boolean variable is true - if all the cards have been matched 
                txtInstruction.setText("Congratulations! You finished the game!"); //outputs the text in the txtInstruction text field informing the user that they have finished the game
        }
    }//GEN-LAST:event_btnGuessAgainActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0); //closses the application
    }//GEN-LAST:event_btnExitActionPerformed
    
    /**
     * method takes an integer value that represents the index of the card and uses it to temporarily set the icon in the lblIconHolder as the cards icon
     * @param x - integer variable used to pass the index of the card of where the method was called
     */
    public void icon(int x) {
        int intTemp = cards.get(x); //declares intTemp variable and defines it at the value at the x index in the cards ArrayList
        //if statement that distinguishes between the indexes and sets the icon in the lblIconHolder as the respective icon
        if (intTemp == 0) //if satement that exectues if the intTemp variable is equal to 0
            lblIconHolder.setIcon(a); //sets the icon of the lblIconHolder as the icon stored as variable a
        else if (intTemp == 1) //if satement that exectues if the intTemp variable is equal to 1
            lblIconHolder.setIcon(b); //sets the icon of the lblIconHolder as the icon stored as variable b
        else if (intTemp == 2) //if satement that exectues if the intTemp variable is equal to 2
            lblIconHolder.setIcon(c); //sets the icon of the lblIconHolder as the icon stored as variable c
        else if (intTemp == 3) //if satement that exectues if the intTemp variable is equal to 3
            lblIconHolder.setIcon(d); //sets the icon of the lblIconHolder as the icon stored as variable d
        else if (intTemp == 4) //if satement that exectues if the intTemp variable is equal to 4
            lblIconHolder.setIcon(e); //sets the icon of the lblIconHolder as the icon stored as variable e
        else if (intTemp == 5) //if satement that exectues if the intTemp variable is equal to 5
            lblIconHolder.setIcon(f); //sets the icon of the lblIconHolder as the icon stored as variable f
        else if (intTemp == 6) //if satement that exectues if the intTemp variable is equal to 6
            lblIconHolder.setIcon(g); //sets the icon of the lblIconHolder as the icon stored as variable g
        else if (intTemp == 7) //if satement that exectues if the intTemp variable is equal to 7
            lblIconHolder.setIcon(h); //sets the icon of the lblIconHolder as the icon stored as variable h
        else if (intTemp == 8) //if satement that exectues if the intTemp variable is equal to 8
            lblIconHolder.setIcon(i); //sets the icon of the lblIconHolder as the icon stored as variable i
        else if (intTemp == 9) //if satement that exectues if the intTemp variable is equal to 9
            lblIconHolder.setIcon(j); //sets the icon of the lblIconHolder as the icon stored as variable j
        
        intCount++; //intCount increases to keep track of how many cards have been selected
        //if statemet that executes if the intCount variable is equal to 1 - first card selected
        if (intCount == 1) {
            intCard1 = intTemp; //sets the intCard1 variable equal to the intTemp variable - used to match cards
            intC1 = x; //sets the intC1 variable as the index of the card so that the same card is not matched with itself as it would have the same intTemp value
            change[x] = 0; //sets the value at index x in the change array at 0 to be able to compare the two numbers (would both have value of 0)
        //if statemet that executes if the intCount variable is equal to 2 - second card selected
        } else if (intCount == 2) {
            intCard2 = intTemp; //sets the intCard2 variable equal to the intTemp variable - used to match cards
            intC2 = x; //sets the intC2 variable as the index of the card so that the same card is not matched with itself as it would have the same intTemp value
            change[x] = 0; //sets the value at index x in the change array at 0 to be able to compare the two numbers (would both have value of 0)
        }
    }
    
    /**
     * takes the integer z to distinguish whether or not the cards match (1 represents no match; 2 represents match)
     * determines which cards have been selected by running through all the cards and seeing which ones have a value of 0 at their index in the change array
     * if the cards don't match, resets the icons of the selected cards back to the back icon so that they can be selected again and sets the value at their index back to 1 in the change array
     * if the cards match, disables the cards so that they cannot be selected again and sets the value at their index to 2 in the change array
     * @param z - integer variable used to distinguish whether the cards have been matched or not
     */
    public void iconGuessAgain(int z) {
        //runs through the loop twice as there are two cards selected
        for (int y = 1; y <= 2; y++) {
                if (change[0] == 0) { //if statement that exectues if the value at index 0 in the change array is 0
                    change[0] = z; //defines the value at index 0 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard1.setEnabled(false); //disables btnCard1 if it is matched (z == 2)
                    else btnCard1.setIcon(back); //sets the icon of btnCard1 as the icon stored as variable back if it is not matched
                } else if (change[1] == 0) { //if statement that exectues if the value at index 1 in the change array is 0
                    change[1] = z; //defines the value at index 1 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard2.setEnabled(false); //disables btnCard2 if it is matched (z == 2)
                    else btnCard2.setIcon(back); //sets the icon of btnCard2 as the icon stored as variable back if it is not matched
                } else if (change[2] == 0) { //if statement that exectues if the value at index 2 in the change array is 0
                    change[2] = z; //defines the value at index 2 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard3.setEnabled(false); //disables btnCard3 if it is matched (z == 2)
                    else btnCard3.setIcon(back); //sets the icon of btnCard3 as the icon stored as variable back if it is not matched
                } else if (change[3] == 0) { //if statement that exectues if the value at index 3 in the change array is 0
                    change[3] = z; //defines the value at index 3 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard4.setEnabled(false); //disables btnCard4 if it is matched (z == 2)
                    else btnCard4.setIcon(back); //sets the icon of btnCard4 as the icon stored as variable back if it is not matched
                } else if (change[4] == 0) { //if statement that exectues if the value at index 4 in the change array is 0
                    change[4] = z; //defines the value at index 4 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard5.setEnabled(false); //disables btnCard5 if it is matched (z == 2)
                    else btnCard5.setIcon(back); //sets the icon of btnCard5 as the icon stored as variable back if it is not matched
                } else if (change[5] == 0) { //if statement that exectues if the value at index 5 in the change array is 0
                    change[5] = z; //defines the value at index 5 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard6.setEnabled(false); //disables btnCard6 if it is matched (z == 2)
                    else btnCard6.setIcon(back); //sets the icon of btnCard6 as the icon stored as variable back if it is not matched
                } else if (change[6] == 0) { //if statement that exectues if the value at index 6 in the change array is 0
                    change[6] = z; //defines the value at index 6 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard7.setEnabled(false); //disables btnCard7 if it is matched (z == 2)
                    else btnCard7.setIcon(back); //sets the icon of btnCard7 as the icon stored as variable back if it is not matched
                } else if (change[7] == 0) { //if statement that exectues if the value at index 7 in the change array is 0
                    change[7] = z; //defines the value at index 7 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard8.setEnabled(false); //disables btnCard8 if it is matched (z == 2)
                    else btnCard8.setIcon(back); //sets the icon of btnCard8 as the icon stored as variable back if it is not matched
                } else if (change[8] == 0) { //if statement that exectues if the value at index 8 in the change array is 0
                    change[8] = z; //defines the value at index 8 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard9.setEnabled(false); //disables btnCard9 if it is matched (z == 2)
                    else btnCard9.setIcon(back); //sets the icon of btnCard9 as the icon stored as variable back if it is not matched
                } else if (change[9] == 0) { //if statement that exectues if the value at index 9 in the change array is 0
                    change[9] = z; //defines the value at index 9 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard10.setEnabled(false); //disables btnCard10 if it is matched (z == 2)
                    else btnCard10.setIcon(back); //sets the icon of btnCard10 as the icon stored as variable back if it is not matched
                } else if (change[10] == 0) { //if statement that exectues if the value at index 10 in the change array is 0
                    change[10] = z; //defines the value at index 10 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard11.setEnabled(false); //disables btnCard11 if it is matched (z == 2)
                    else btnCard11.setIcon(back); //sets the icon of btnCard11 as the icon stored as variable back if it is not matched
                } else if (change[11] == 0) { //if statement that exectues if the value at index 11 in the change array is 0
                    change[11] = z; //defines the value at index 11 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard12.setEnabled(false); //disables btnCard12 if it is matched (z == 2)
                    else btnCard12.setIcon(back); //sets the icon of btnCard12 as the icon stored as variable back if it is not matched
                } else if (change[12] == 0) { //if statement that exectues if the value at index 12 in the change array is 0
                    change[12] = z; //defines the value at index 12 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard13.setEnabled(false); //disables btnCard13 if it is matched (z == 2)
                    else btnCard13.setIcon(back); //sets the icon of btnCard13 as the icon stored as variable back if it is not matched
                } else if (change[13] == 0) { //if statement that exectues if the value at index 13 in the change array is 0
                    change[13] = z; //defines the value at index 13 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard14.setEnabled(false); //disables btnCard14 if it is matched (z == 2)
                    else btnCard14.setIcon(back); //sets the icon of btnCard14 as the icon stored as variable back if it is not matched
                } else if (change[14] == 0) { //if statement that exectues if the value at index 14 in the change array is 0
                    change[14] = z; //defines the value at index 14 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard15.setEnabled(false); //disables btnCard15 if it is matched (z == 2)
                    else btnCard15.setIcon(back); //sets the icon of btnCard15 as the icon stored as variable back if it is not matched
                } else if (change[15] == 0) { //if statement that exectues if the value at index 15 in the change array is 0
                    change[15] = z; //defines the value at index 15 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard16.setEnabled(false); //disables btnCard16 if it is matched (z == 2)
                    else btnCard16.setIcon(back); //sets the icon of btnCard16 as the icon stored as variable back if it is not matched
                } else if (change[16] == 0) { //if statement that exectues if the value at index 16 in the change array is 0
                    change[16] = z; //defines the value at index 16 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard17.setEnabled(false); //disables btnCard17 if it is matched (z == 2)
                    else btnCard17.setIcon(back); //sets the icon of btnCard17 as the icon stored as variable back if it is not matched
                } else if (change[17] == 0) { //if statement that exectues if the value at index 17 in the change array is 0
                    change[17] = z; //defines the value at index 17 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard18.setEnabled(false); //disables btnCard18 if it is matched (z == 2)
                    else btnCard18.setIcon(back); //sets the icon of btnCard18 as the icon stored as variable back if it is not matched
                } else if (change[18] == 0) { //if statement that exectues if the value at index 18 in the change array is 0
                    change[18] = z; //defines the value at index 18 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard19.setEnabled(false); //disables btnCard19 if it is matched (z == 2)
                    else btnCard19.setIcon(back); //sets the icon of btnCard19 as the icon stored as variable back if it is not matched
                } else if (change[19] == 0) { //if statement that exectues if the value at index 19 in the change array is 0
                    change[19] = z; //defines the value at index 19 in the change array as z (1 if no match; 2 if a match)
                    if (z == 2) btnCard20.setEnabled(false); //disables btnCard20 if it is matched (z == 2)
                    else btnCard20.setIcon(back); //sets the icon of btnCard20 as the icon stored as variable back if it is not matched
                }
            }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGameGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCard1;
    private javax.swing.JButton btnCard10;
    private javax.swing.JButton btnCard11;
    private javax.swing.JButton btnCard12;
    private javax.swing.JButton btnCard13;
    private javax.swing.JButton btnCard14;
    private javax.swing.JButton btnCard15;
    private javax.swing.JButton btnCard16;
    private javax.swing.JButton btnCard17;
    private javax.swing.JButton btnCard18;
    private javax.swing.JButton btnCard19;
    private javax.swing.JButton btnCard2;
    private javax.swing.JButton btnCard20;
    private javax.swing.JButton btnCard3;
    private javax.swing.JButton btnCard4;
    private javax.swing.JButton btnCard5;
    private javax.swing.JButton btnCard6;
    private javax.swing.JButton btnCard7;
    private javax.swing.JButton btnCard8;
    private javax.swing.JButton btnCard9;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGuessAgain;
    private javax.swing.JButton btnPlay;
    private javax.swing.JLabel lblIconHolder;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtInstruction;
    // End of variables declaration//GEN-END:variables
}
